
import com.itextpdf.text.Chapter;
import com.itextpdf.text.Chunk;
import com.itextpdf.text.PageSize;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.pdf.PdfAction;
import com.itextpdf.text.pdf.PdfWriter;
import com.itextpdf.text.Document;
import com.itextpdf.text.Element;
import com.itextpdf.text.FontFactory;
import com.itextpdf.text.Section;
import com.itextpdf.text.pdf.CMYKColor;
import java.awt.Font;
import java.awt.GridLayout;
import java.awt.HeadlessException;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.io.FileOutputStream;
import java.io.FileWriter;
import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Types;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JProgressBar;
import javax.swing.Timer;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Tomek
 */
public class GenerowaniePDF extends javax.swing.JFrame {
Connection con=null;
ResultSet rs=null;
PreparedStatement pst=null;

     //  private JProgressBar jProgressBar1 = new JProgressBar(JProgressBar.HORIZONTAL, 0, 100);
       private Timer timer = new Timer(10, new ActionListener() {
       private int counter = 1;
       

        @Override
        public void actionPerformed(ActionEvent ae) {
          jLabel1.setText(String.valueOf(counter));
            jProgressBar1.setValue(++counter);
          if (counter > 100) {
                timer.stop();
           }
        }
    });
    /**
     * Creates new form test
     */
    public  GenerowaniePDF() {
      
        initComponents();
        setLocationRelativeTo(null);
        
      
        
        jProgressBar1.setValue(0);
        timer.start();
        this.add(jProgressBar1);
        this.add(jLabel1);
        
        
       
                
                
     //   JOptionPane.showMessageDialog(null, this);
     
    }
    
public void createPdf() {
    String dest = dest();
    Document document = new Document(PageSize.A4, 50, 50, 50, 50);
    try {
        // JOptionPane.showMessageDialog(null, dest());
        
        
      PdfWriter writer = PdfWriter.getInstance(document, new FileOutputStream(dest+"/szpital.pdf"));
      
      document.open();
      String Imie = Nazwa();
      String lekarz = PacjentLekarz();
      String diag = PacjentDiagnoza();
      String dataP = PacjentData();
      String dataW = PacjentDataWypis();
      
      Paragraph raport = new Paragraph(new Chunk("Raport z pobytu w szpitalu"));
      
      Paragraph imieNazwisko = new Paragraph(new Chunk("Imie i Nazwisko: " + Imie));
      Paragraph PESEL = new Paragraph(new Chunk("PESEL: " + Login.login));
      Paragraph lekarzProwadzacy = new Paragraph(new Chunk("Lekarz prowadzący: " +lekarz));
      Paragraph diagnoza = new Paragraph(new Chunk("Diagnoza: " +diag));
      
      Paragraph dataPrz = new Paragraph(new Chunk("Data przyjecia na oddział: " +dataP));
      Paragraph dataWyp = new Paragraph(new Chunk("Data wypisania z oddziału: " +dataW));
      
      
      Paragraph tytul = new Paragraph(new Chunk("Program:  Pacjent w Szpitalu"));
      Paragraph przedmiot = new Paragraph(new Chunk("Przedmiot:  Bazy Danych"));
      Paragraph wykonanie = new Paragraph(new Chunk("Wykonanie:  Tomasz Niemczyk"));
      Paragraph rok = new Paragraph(new Chunk("2017"));
      
      Paragraph enter = new Paragraph(new Chunk("  "));
      tytul.setAlignment(Element.ALIGN_CENTER);
      przedmiot.setAlignment(Element.ALIGN_CENTER);
      wykonanie.setAlignment(Element.ALIGN_CENTER);
      rok.setAlignment(Element.ALIGN_CENTER);
      enter.setAlignment(Element.ALIGN_CENTER);
      raport.setAlignment(Element.ALIGN_CENTER);
     
      
     
      document.add(raport);
      document.add(enter);
      document.add(imieNazwisko);
      document.add(PESEL);
      document.add(lekarzProwadzacy);
      document.add(diagnoza);
      document.add(enter);
      document.add(dataPrz);
      document.add(dataWyp);
      document.add(enter);
      
      document.add(enter);
      document.add(enter);
      document.add(enter);
      document.add(enter);
      document.add(tytul);
      document.add(przedmiot);
      document.add(wykonanie);
      document.add(rok);
      
      
    } catch (Exception de) {
      de.printStackTrace();
    }
    document.close();

  
}
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jProgressBar1 = new javax.swing.JProgressBar();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setName("Raport"); // NOI18N
        setUndecorated(true);

        jButton1.setText("Pobierz");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel2.setText("Generowanie raportu");

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("0");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(82, 82, 82)
                        .addComponent(jProgressBar1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(116, 116, 116)
                        .addComponent(jButton1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(141, 141, 141)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(95, 95, 95)
                        .addComponent(jLabel2)))
                .addContainerGap(82, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jProgressBar1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton1)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
 private String Nazwa()
   {
     String nazwa = "null";
     
        con=Polaczenie.ConnectDB();
         String sql= "select IMIE from SZPITAL_DB.LOGOWANIE where LOGIN= '" +Login.login+ "'";
    try
      {
          pst=con.prepareStatement(sql);
          rs= pst.executeQuery();
           if(rs.next()){
        String add1=rs.getString("IMIE");
          nazwa = add1;
           }
      }
    catch(SQLException | HeadlessException e){
         JOptionPane.showMessageDialog(null, e); 
   }
     return nazwa;
   }
 private String PacjentLekarz()
   {
    String PacjentLekarz = "null-";
    String login = Login.login;
           
     con=Polaczenie.ConnectDB();
         String sql="{? = call SZPITAL_DB.PACJENT_LEKARZ(?)}";
    try
      {
    CallableStatement stmt = con.prepareCall(sql);
    stmt.setString(2, Login.login);
    stmt.registerOutParameter(1,Types.VARCHAR);
    stmt.execute();
    String ile = stmt.getString(1);
    stmt.execute();
    
     PacjentLekarz = ile;
      }
    catch(SQLException | HeadlessException e){
         JOptionPane.showMessageDialog(null, e); 
   }
     return PacjentLekarz;
   }
 private String PacjentDiagnoza()
   {
    String PacjentDiagnoza = "null-";
    String login = Login.login;
          

     con=Polaczenie.ConnectDB();
         String sql="{? = call SZPITAL_DB.PACJENT_DIAGNOZA(?)}";
    try
      {
    CallableStatement stmt = con.prepareCall(sql);
    stmt.setString(2, Login.login);
    stmt.registerOutParameter(1,Types.VARCHAR);
    stmt.execute();
    String ile = stmt.getString(1);
    stmt.execute();
    
     PacjentDiagnoza = ile;
      }
    catch(SQLException | HeadlessException e){
         JOptionPane.showMessageDialog(null, e); 
   }
     return PacjentDiagnoza;
   }
 private String PacjentData()
   {
    String PacjentData = "null-";
    String login = Login.login;
          

     con=Polaczenie.ConnectDB();
         String sql="{? = call SZPITAL_DB.PACJENT_DATA(?)}";
    try
      {
    CallableStatement stmt = con.prepareCall(sql);
    stmt.setString(2, Login.login);
    stmt.registerOutParameter(1,Types.VARCHAR);
    stmt.execute();
    String ile = stmt.getString(1);
    stmt.execute();
    
     PacjentData = ile;
      }
    catch(SQLException | HeadlessException e){
         JOptionPane.showMessageDialog(null, e); 
   }
     return PacjentData;
   }
 private String PacjentDataWypis()
   {
    String PacjentDataWypis = "null-";
    String login = Login.login;
          

     con=Polaczenie.ConnectDB();
         String sql="{? = call SZPITAL_DB.PACJENT_DATA_WYPIS(?)}";
    try
      {
    CallableStatement stmt = con.prepareCall(sql);
    stmt.setString(2, Login.login);
    stmt.registerOutParameter(1,Types.VARCHAR);
    stmt.execute();
    String ile = stmt.getString(1);
    stmt.execute();
    
     PacjentDataWypis = ile;
      }
    catch(SQLException | HeadlessException e){
         JOptionPane.showMessageDialog(null, e); 
   }
     return PacjentDataWypis;
   }
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
       createPdf();
       this.hide();
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GenerowaniePDF.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GenerowaniePDF.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GenerowaniePDF.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GenerowaniePDF.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GenerowaniePDF().setVisible(true);
                GenerowaniePDF cdpb = new GenerowaniePDF();
         
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JProgressBar jProgressBar1;
    // End of variables declaration//GEN-END:variables

    private String dest() {
        String elo = null;
    JFileChooser chooser = new JFileChooser();
    chooser.setCurrentDirectory(new java.io.File(System.getProperty("user.home"), "Desktop"));
    chooser.setDialogTitle("Wybierz lokalizację");
    chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
    chooser.setApproveButtonText("Zapisz");
    
    chooser.setAcceptAllFileFilterUsed(false);

    if (chooser.showOpenDialog(null) == JFileChooser.APPROVE_OPTION) {
        JOptionPane.showMessageDialog(null, "Zapisano w: " + chooser.getSelectedFile());
        elo =""+chooser.getSelectedFile();
    } else {
       JOptionPane.showMessageDialog(null, "Nie wybrano lokalizacji !");
    }
        return elo;
  }
    
}
